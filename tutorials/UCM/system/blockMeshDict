/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 0.001;

vertices
(
    (0 0 0)
    (100 0 0)
    (0 5 0)
    (100 5 0)
    (0 15 0)
    (100 15 0)
    (0 20 0)
    (100 20 0)
    (150 0 0)
    (150 5 0)
    (350 0 0)
    (350 5 0)

    (0 0 0.1)
    (100 0 0.1)
    (0 5 0.1)
    (100 5 0.1)
    (0 15 0.1)
    (100 15 0.1)
    (0 20 0.1)
    (100 20 0.1)
    (150 0 0.1)
    (150 5 0.1)
    (350 0 0.1)
    (350 5 0.1)
);

blocks
(

    hex (0 1 3 2 12 13 15 14) (24 10 1) simpleGrading (0.01116279506 0.2052504667 1)
    hex (2 3 5 4 14 15 17 16) (24 13 1) simpleGrading (0.01116279506 9.315264895 1)
    hex (4 5 7 6 16 17 19 18) (24 5 1) simpleGrading (0.01116279506 0.2171245102 1)
    hex (1 8 9 3 13 20 21 15) (20 10 1) simpleGrading (46.57661513 0.2052504667 1)
    hex (8 10 11 9 20 22 23 21) (7 10 1) simpleGrading (6.476978227 0.2052504667 1)

);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 12 14 2)
            (2 14 16 4)
            (4 16 18 6)
        );
    }
    fixedWalls
    {
        type wall;
        faces
        (
            (6 18 19 7)
            (5 7 19 17)
            (3 5 17 15)
            (3 15 21 9)
            (9 21 23 11)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (10 11 23 22)
        );
    }
    simetry
    {
        type symmetryPlane;
        faces
        (
            (0 1 13 12)
            (1 8 20 13)
            (8 10 22 20)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (0 2 3 1)
            (2 4 5 3)
            (4 6 7 5)
            (1 3 9 8)
            (8 9 11 10)
            (12 13 15 14)
            (14 15 17 16)
            (16 17 19 18)
            (13 20 21 15)
            (20 22 23 21)
        );
    }
);

mergePatchPairs
(
);


// ************************************************************************* //
